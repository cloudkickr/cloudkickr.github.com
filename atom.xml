<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[cloudkickr]]></title>
  <link href="http://cloudkickr.github.com/atom.xml" rel="self"/>
  <link href="http://cloudkickr.github.com/"/>
  <updated>2012-12-16T14:03:58-05:00</updated>
  <id>http://cloudkickr.github.com/</id>
  <author>
    <name><![CDATA[Bent Cardan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Classic 80s]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/12/16/classic-80s/"/>
    <updated>2012-12-16T13:58:00-05:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/12/16/classic-80s</id>
    <content type="html"><![CDATA[<p>Dope track off The Cars album &#8220;Heartbeat City&#8221;, 1984. This album is one of the #1 80&#8217;s classics of all time. ï»¿ Cautiously hopeful, upbeat, and dares to be optimistic.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/9pxHjpC6-m0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Music]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/12/09/big-music/"/>
    <updated>2012-12-09T14:46:00-05:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/12/09/big-music</id>
    <content type="html"><![CDATA[<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F65512991"></iframe>




<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F19968968"></iframe>




<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F483826"></iframe>




<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F59449492"></iframe>




<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F22782246"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Circle Ranch]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/11/08/circle/"/>
    <updated>2012-11-08T14:14:00-05:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/11/08/circle</id>
    <content type="html"><![CDATA[<iframe src="http://player.vimeo.com/video/53032342?badge=0" width="500" height="281" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p> <p><a href="http://vimeo.com/53032342">Circle Ranch 2012</a> from <a href="http://vimeo.com/user10268714">Sam Steves II</a> on <a href="http://vimeo.com">Vimeo</a>.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[express 3 released]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/25/express-3-released/"/>
    <updated>2012-10-25T00:03:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/25/express-3-released</id>
    <content type="html"><![CDATA[<p><a href="http://expressjs.com/">Express</a> is officially version 3 since yesterday.  After a series of test-oriented commits throughout October, <a href="https://github.com/visionmedia">TJ Holowaychuk</a> bumped his node framework of developer fame from <a href="https://github.com/visionmedia/express/commit/12d97169d729529ae5dd7f453373e35da0fe1b6c">rc5 to 3.0.0</a>.</p>

<p>We&#8217;re all exited. It is a great time to be in web technology. I&#8217;m using express a lot. Really enjoy the speed of creation using Jade templating and Stylus. Both of those expressy things broke free and are way out of the mold of sytax time killing contraints.  Time to update package.json files and express on our systems. By the way make sure to protect your keyboard by saving six letters that often get tossed around for no reason. Just run <code>npm i</code> to install from package.json. No need to write out the word install everytime.</p>

<figure class='code'><figcaption><span>new app - package.js on </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>   <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;express&quot;</span><span class="o">:</span> <span class="s2">&quot;3.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;jade&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;stylus&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS plus MongoDB]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/24/angularjs-mongodb/"/>
    <updated>2012-10-24T03:20:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/24/angularjs-mongodb</id>
    <content type="html"><![CDATA[<p>Think outside the box.</p>

<p>We&#8217;re past relational data. We live in the single page web app era with a preference for <a href="http://nodejs.org/">Node.js</a>. <a href="http://www.mongodb.org/">MongoDB</a> for things of great import, so use the safe command:</p>

<p><code>collection.insert(doc2, {safe:true}, function(err, result) {});</code></p>

<p><a href="http://redis.io/">Redis</a> instances are cool speedy transaction when data persistence over a long duration is lower priority, i.e., session storage.</p>

<p>No matter what though it all flows back to HTML; even stylesheets cascade down to an element.</p>

<p>With that in mind, let&#8217;s explore whether <a href="http://angularjs.org/">AngularJS</a> can help us craft real-time <a href="http://en.wikipedia.org/wiki/UI_data_binding">data bindings</a> that update the view immediately whenever the model changes.</p>

<p>JavaScript is definitely powerful enough to create DOM updates on changes in our data model. Of course the language is <a href="http://javascript.crockford.com/javascript.html">often unruly</a>.</p>

<p><a href="http://www.youtube.com/user/angularjs">Angular</a> offers a unique solution that may simplify things. Compare to <a href="http://backbonejs.org/">Backbone</a>. In Backbone, data changes (plus corresponding events fired from the data-model) bubble up to the view. So we like to start by declaring a model. Then extend it to watch for changes on the model via getters and setters&#8211;<a href="http://addyosmani.github.com/backbone-fundamentals/#mvc-mvp">The Observer Pattern</a>.</p>

<p>In completely different fashion, <a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a> in AngularJS allows us to <a href="http://en.wikipedia.org/wiki/Declarative_programming">declaratively</a> describe how our application is wired. The approach in Angular is such that any JavaScript object can be a model.</p>

<p>Sounds good, right? Now let&#8217;s see if we can wire some AngularJS <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> to MongoDB&#8230; Check back soon for the snippet on how to do that, I&#8217;m working it out right now and I&#8217;ll update this post soon with examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recommended Reading]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/19/recommended-reading/"/>
    <updated>2012-10-19T23:48:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/19/recommended-reading</id>
    <content type="html"><![CDATA[<p>Well, these are a few of my favorites right now.</p>

<p><img src="http://cloudkickr.github.com//s3.amazonaws.com/kickr/assets/images/good-books.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purity Ring]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/06/purity-ring/"/>
    <updated>2012-10-06T19:23:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/06/purity-ring</id>
    <content type="html"><![CDATA[<iframe src="http://player.vimeo.com/video/22441978?portrait=0" width="400" height="300" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Florence + The Machine]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/06/florence/"/>
    <updated>2012-10-06T18:10:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/06/florence</id>
    <content type="html"><![CDATA[<p>I love listening to Florence. Perfect background for programming the next big thing!</p>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F49701267&amp;auto_play=false&amp;show_artwork=true&amp;color=5072a6"></iframe>




<iframe width="100%" height="166" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F24787124&amp;auto_play=false&amp;show_artwork=true&amp;color=5072a6"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Gemmy]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/05/the-gemmy/"/>
    <updated>2012-10-05T00:52:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/05/the-gemmy</id>
    <content type="html"><![CDATA[<iframe width="100%" height="166" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F47725512&show_artwork=true"></iframe>


<iframe width="100%" height="166" scrolling="no" frameborder="no" src="http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F3818721&show_artwork=true"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's wrong with JavaScript?]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/04/whats-right-with-javascript/"/>
    <updated>2012-10-04T05:15:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/04/whats-right-with-javascript</id>
    <content type="html"><![CDATA[<iframe width="560" height="315" src="http://www.youtube.com/embed/bsGgfUreyZw" frameborder="0" allowfullscreen></iframe>


<p>Renown V8 engineers, Lars Bak and Kasper Lund: the two creators of Dart discuss rationale behind Dart&#8217;s design and its impact on web scalability and performance. Dart offers an alternative approach to building complex JavaScript-based web applications.</p>

<p>Before Dart they built Google Chrome&#8217;s V8 Engine, an unprecedented runtime environment on which the Node.js platform is built. Lars Bak has over 26 years of Object Oriented programming experience on Virtual Machines.</p>

<p>These incredible engineers present how Dart helps developers innovate by increasing their productivity without breaking backwards compatibility. They discuss how Dart compiles to JavaScript, and in the process sling a veiled insult or two at CoffeeScript.</p>

<p>Right, well, here&#8217;s a link to <a href="https://developers.google.com/io/">the I/O 2012 sessions</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts About JavaScript]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/03/whats-wrong-with-js/"/>
    <updated>2012-10-03T10:01:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/03/whats-wrong-with-js</id>
    <content type="html"><![CDATA[<p>If we want to use the internet, well, then we need JavaScript.</p>

<p>The language is responsible for full stack web apps that perform as well as or even many times faster than what we would expect from <a href="http://rubyonrails.org/">Ruby on Rails</a>, backed by databases, request routers and their corollary, sometimes implemented in a controller: the response object.</p>

<p>Node is wild. We write Node Apps in JavaScript but it&#8217;s like nothing I&#8217;ve ever done before. Callback functions guide the event-loop asynchronously.</p>

<p>Control the event loop by nesting functions in the fashion of JavaScript closures. It&#8217;s out of hand when the inner function has a longer lifetime than its outer function. The server below stores keys and values in <a href="http://redis.io/">Redis</a> for session management during user authentication. Redis is useful for keeping track of state, non-blocking and super fast.</p>

<figure class='code'><figcaption><span>excerpt from redis module - user.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;redis&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">,</span> <span class="nx">bcrypt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bcrypt&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="p">,</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'><span class="kd">function</span> <span class="nx">User</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">this</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">User</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">){</span>
</span><span class='line'> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>   <span class="nx">db</span><span class="p">.</span><span class="nx">incr</span><span class="p">(</span><span class="s1">&#39;user:ids&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">id</span><span class="p">){</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>     <span class="nx">self</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>     <span class="nx">self</span><span class="p">.</span><span class="nx">hashPassword</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// all redis-backed auth logic via module.</span>
</span></code></pre></td></tr></table></div></figure>


<p>File uploading and content management behind the auth layer are supported by MongoDB. I&#8217;m a fan of regular Mongo with the npm BSON install, but for this project I went for <a href="http://mongoosejs.com/">Mongoose</a>.</p>

<p>By separating logic out into modules we keep our code decoupled the way we like. We declare these dependencies in JavaScript through variable hoisting, so that our runtime stays predictable and most efficient, reducing the chances of unintended memory leak.</p>

<figure class='code'><figcaption><span>express 3 - app.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Module dependencies. </span>
</span><span class='line'><span class="cm"> * Variable hoisting, replacing var with a comma.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./lib/middleware/user&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">login</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/login&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">register</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/register&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">photos</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/photos&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">about</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/about&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">contact</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/contact&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">blog</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./routes/blog&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./lib/helpers&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">//  , stylus = require(&#39;stylus&#39;)</span>
</span><span class='line'><span class="c1">//  , nib = require(&#39;nib&#39;)</span>
</span><span class='line'><span class="c1">//  , sass = require(&#39;node-sass&#39;)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">less</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;less&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">md</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;github-flavored-markdown&#39;</span><span class="p">).</span><span class="nx">parse</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">createConnection</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Connect to Databases.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// now time to connect to MongoDB.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="s1">&#39;connection error:&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">aboutSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">contentsection</span><span class="o">:</span>  <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">author</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">body</span><span class="o">:</span>   <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">date</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span> <span class="k">default</span><span class="o">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span> <span class="p">},</span>
</span><span class='line'>    <span class="nx">hidden</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">schema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span>    <span class="nb">String</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">binary</span><span class="o">:</span>  <span class="nx">Buffer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">living</span><span class="o">:</span>  <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">updated</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nb">Date</span><span class="p">,</span> <span class="k">default</span><span class="o">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span> <span class="p">}</span>
</span><span class='line'>    <span class="nx">age</span><span class="o">:</span>     <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nb">Number</span><span class="p">,</span> <span class="nx">min</span><span class="o">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nx">max</span><span class="o">:</span> <span class="mi">65</span> <span class="p">}</span>
</span><span class='line'>    <span class="nx">mixed</span><span class="o">:</span>   <span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">Mixed</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">_someId</span><span class="o">:</span> <span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">array</span><span class="o">:</span>      <span class="p">[],</span>
</span><span class='line'>    <span class="nx">ofString</span><span class="o">:</span>   <span class="p">[</span><span class="nb">String</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">ofNumber</span><span class="o">:</span>   <span class="p">[</span><span class="nb">Number</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">ofDates</span><span class="o">:</span>    <span class="p">[</span><span class="nb">Date</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">ofBuffer</span><span class="o">:</span>   <span class="p">[</span><span class="nx">Buffer</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">ofBoolean</span><span class="o">:</span>  <span class="p">[</span><span class="nb">Boolean</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">ofMixed</span><span class="o">:</span>    <span class="p">[</span><span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">Mixed</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">ofObjectId</span><span class="o">:</span> <span class="p">[</span><span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">nested</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">stuff</span><span class="o">:</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="nb">String</span><span class="p">,</span> <span class="nx">lowercase</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">trim</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// ready the express web server</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//function compile(str, path) {</span>
</span><span class='line'><span class="c1">//  return stylus(str)</span>
</span><span class='line'><span class="c1">//    .set(&#39;filename&#39;, path)</span>
</span><span class='line'><span class="c1">//    .set(&#39;compress&#39;, true)</span>
</span><span class='line'><span class="c1">//    .use(nib());</span>
</span><span class='line'><span class="c1">//}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Setup Markdown Template Engine</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">engine</span><span class="p">(</span><span class="s1">&#39;md&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">fn</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">str</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">fn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="nx">md</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">html</span> <span class="o">=</span> <span class="nx">html</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\{([^}]+)\}/g</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">name</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">options</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">fn</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">html</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fn</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set the environment to development, Node&#39;s environment variable. </span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">env</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">||</span> <span class="s1">&#39;development&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Express Middleware.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">configure</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;views&#39;</span><span class="p">,</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/views&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view engine&#39;</span><span class="p">,</span> <span class="s1">&#39;jade&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;view options&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">layout</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">favicon</span><span class="p">(</span><span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public/favicon.ico&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;photos&#39;</span><span class="p">,</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public/photos&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">favicon</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">logger</span><span class="p">(</span><span class="s1">&#39;dev&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">bodyParser</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">methodOverride</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieParser</span><span class="p">(</span><span class="s1">&#39;blurfoobarnar&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieSession</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'><span class="c1">//  app.use(stylus.middleware({</span>
</span><span class='line'><span class="c1">//    src: __dirname</span>
</span><span class='line'><span class="c1">//    , compile: compile</span>
</span><span class='line'><span class="c1">//  }));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="s1">&#39;development&#39;</span> <span class="o">==</span> <span class="nx">env</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">errorHandler</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">app</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;photos&#39;</span><span class="p">,</span> <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/public/photos&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Node was designed around fundamental concepts of network engineering and data transport. These fundamentals of data flow are better known as <code>the request</code> made by a browser and <code>the response</code> from the server. Node forces the developer to deal with each side of the coin.</p>

<figure class='code'><figcaption><span>express 3 continued - app.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Routing.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">routes</span><span class="p">.</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/photos&#39;</span><span class="p">,</span> <span class="nx">photos</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="nx">login</span><span class="p">.</span><span class="nx">form</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span> <span class="nx">login</span><span class="p">.</span><span class="nx">submit</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="nx">login</span><span class="p">.</span><span class="nx">logout</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="nx">register</span><span class="p">.</span><span class="nx">form</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="nx">register</span><span class="p">.</span><span class="nx">submit</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="nx">photos</span><span class="p">.</span><span class="nx">form</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="nx">photos</span><span class="p">.</span><span class="nx">submit</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;photos&#39;</span><span class="p">)));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/about&#39;</span><span class="p">,</span> <span class="nx">about</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/contact&#39;</span><span class="p">,</span> <span class="nx">contact</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/songs&#39;</span><span class="p">,</span> <span class="nx">songs</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/studios&#39;</span><span class="p">,</span> <span class="nx">studios</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/entertainment&#39;</span><span class="p">,</span> <span class="nx">entertainment</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/create&#39;</span><span class="p">,</span> <span class="nx">create</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/blog&#39;</span><span class="p">,</span> <span class="nx">blog</span><span class="p">.</span><span class="nx">list</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Initializing the server now.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port &quot;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fix your routes]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/08/08/routes/"/>
    <updated>2012-08-08T23:51:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/08/08/routes</id>
    <content type="html"><![CDATA[<p>Named routes are key to rails 3. Use the :as parameter.</p>

<figure class='code'><figcaption><span>named route - routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">YourApp</span><span class="o">::</span><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'><span class="n">match</span> <span class="s1">&#39;/route&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;static_pages#route&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:route</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyll-s3]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/08/02/using-jekyll-s3/"/>
    <updated>2012-08-02T08:52:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/08/02/using-jekyll-s3</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>bucket policy - bucketpolicy.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;Version&quot;</span><span class="o">:</span> <span class="s2">&quot;2008-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Statement&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;Sid&quot;</span><span class="o">:</span> <span class="s2">&quot;PublicReadGetObject&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Effect&quot;</span><span class="o">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Principal&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;AWS&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="s2">&quot;Action&quot;</span><span class="o">:</span> <span class="s2">&quot;s3:GetObject&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Resource&quot;</span><span class="o">:</span> <span class="s2">&quot;arn:aws:s3:::yourbucketnamehere.com/*&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One small commit]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/07/30/one-small-commit/"/>
    <updated>2012-07-30T00:11:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/07/30/one-small-commit</id>
    <content type="html"><![CDATA[<p>One small <a href="https://github.com/rails/rails/commit/0899be5798d20e3e886e5f741d3e4b1bf43afedd">commit</a> to open source, one giant leap for mankind?  Obviously this is old technology for the aliens who work at google.com.</p>

<p>But the rest of us mortals of Earth will rejoice! Ladies and gentlemen, please enable wifi on all your devices, because the web is coming to life.</p>

<p><a href="http://tenderlovemaking.com">Aaron Patterson</a> is changing the course of open source development history.</p>

<p>The live web is no longer just a google thing. Live in-browser updating on changes in serverside data has become more accessible for developers.</p>

<p>Learn more about the new reality of live web from <a href="http://tenderlovemaking.com/2012/07/30/is-it-live.html">Aaron Patterson&#8217;s is-it-live post</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Rails 4.0.0.beta]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/07/29/rails-4.0.0.beta/"/>
    <updated>2012-07-29T05:02:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/07/29/rails-4.0.0.beta</id>
    <content type="html"><![CDATA[<p>Rails 4.0.0.beta compiled for production feels faster than Rails 3 to me, especially when proxied by <a href="http://wiki.nginx.org/Main">Nginx</a> and initialized with <a href="http://puma.io/">Puma</a>. First I clone the master branch of <a href="https://github.com/rails/rails">Rails on Github</a>.  There&#8217;s a multithread option, and background process queue option available by default in the Rails 4 initializers. You&#8217;ll need ruby 1.9.3 and probably a public key linked to your github, as usual in all things of this nature.</p>

<figure class='code'><figcaption><span>pull down the master branch - clone.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git://github.com/rails/rails.git
</span></code></pre></td></tr></table></div></figure>


<p>After the pull, generate Rails 4 beta apps by executing railties binaries in our local copy</p>

<figure class='code'><figcaption><span>generate the rails app - rails.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rails/railties/bin/rails new myrails4app --edge --skip-bundle --skip-test-unit
</span></code></pre></td></tr></table></div></figure>


<p>Wait to run bundle for an opportunity to isolate and to manage gem dependencies.</p>

<figure class='code'><figcaption><span>rvm - rvmrc.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>myrails4app
</span><span class='line'><span class="nv">$ </span>rvm --rvmrc --create 1.9.3@myrails4app
</span></code></pre></td></tr></table></div></figure>


<p>Add the puma gem for multithreaded processing.</p>

<figure class='code'><figcaption><span>adding puma - Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'puma'</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re going with a relational database, kick up your pool: params in the database.yml file, absolutely the higher pool is ideal, set it to something like pool: 16. Puma defaults to 16 threads when no configuration is specified. Assuming modern server hardware equipped with multi-core processors, this means 16 request/response threads by default will be handled, routed and delivered by the app over one puma process.</p>

<figure class='code'><figcaption><span>inside the config directory - database.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">db/development.sqlite3</span>
</span><span class='line'><span class="l-Scalar-Plain">pool</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">16</span>
</span></code></pre></td></tr></table></div></figure>


<p>A potential block arises where the database is unable to write at the speed of the incoming request/response thread. We call that blocking I/O. If we&#8217;re using Active Record, we might opt for PostgreSQL. <a href="http://redis.io/">Redis</a> would be among the best options available for storing decoupled, thread-safe logic handled by Puma despite Redis&#8217; single threaded architecture. In fact, we err to dismiss a Puma/Redis combination on the basis of Puma&#8217;s multithreaded and Redis&#8217; single-threaded architectural difference alone.</p>

<p>The Redis Server was built for pipelining. A Request/Response server can be implemented so that it is able to process new requests even if the client didn&#8217;t already read the old responses. This way it is possible to send multiple commands to the server without waiting for the replies at all, and finally read the replies in a single step. Redis Pipelining avoids I/O blocking, however it must be supported by available memory. Redis stores data in memory and later writes to disk.</p>

<p>Go bigger when you let puma loose if you like. Be mindful that your default database.yml limits threading explicitly by pool size and more implicity at the limit of its ability to write and return data from threads. Pool params represents max simultaneous (or close to it) data transactions into or out of the database. In general we want to increase the size of our pool wherever possible. Set your gems and run Bundle. Beyond this step it&#8217;s typical that you&#8217;ll need to nudge on rails executables using &#8216;bundle exec&#8217; or try to pass in &#8211;binstubs if it can prevent the need for &#8216;bundle exec&#8217; if you ever rake migrations or &#8216;rails s&#8217;.</p>

<figure class='code'><figcaption><span>generate the rails app - bundle.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>bundle install --binstubs
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://edgeguides.rubyonrails.org/">Edge guides</a> are helpful, but I spend more time hitting <a href="http://edgeapi.rubyonrails.org/">the edgeapi</a> like a boss. Build up something and try to break it in order to check out the new error messaging and exception handling interface in development mode.</p>

<p>New syntax contraints await throughout the config/routes.rb file. Routes complained about how I matched the controller action using the older => syntax still perfectly fine in rails 3.2.7. I thought it was cool Rails 4 asked me to revise this syntax and preface all GET requests with GET. Not such a bad idea&#8230;</p>

<p>Play with the process queue initializer setting. Uncomment config.threadsafe! in the production.rb file to test multithreads with puma. If you do this, watch out for closely coupled procedural calculations. Anything coupled is suspect and ought to be refactored anyway. Look out for object ordering or dependent, interwoven actions generated in the controller, (I&#8217;m thinking like ActiveRecord&#8217;s build method available for relating has_many and blongs_to model relationships like for shopping cart and order relationships .. so caution on implementing e-commerce cart/order models and controllers under this enviornment). To protect business critical object-integrity across the app we might take note of these patterns and wrap them in the mutex class in order to shift the alignment of threads into a data-safe, linear approach. I think mutexing on multi-threads is problematic because it bottlenecks the app and your request is sitting there spinning out where nowhere to go until the threads ahead complete their route. People hate waiting for slow web apps. Forget the mutex class, the answer is decoupled design through refactoring.</p>

<p>Let&#8217;s now observe the multithreaded rails4 app in production: proxy it with nginx on a remote server, a VPS. I like to proxy-pass the puma process upstream at the unix socket. Unix sockets: fast, reliable, secure. We can run rails apps run in parallel on the server, seemingly proxied by their own nginx.conf. I say seemingly because a centralized proxy config file references a sub-directory (sites-enabled or in some installations sites-available) with an Nginx syntactical include out to all these nginx.conf files associated with its own app.</p>

<p>We set a symbolic link in the sites sub-directory to complete this type of Nginx include. Each sym link can reference behavioral configuration in nginx across many different rails apps in parallel on a single IP. Perfect example of the power of unix. Our symbolic link brings config options available to the nginx proxy server as incoming requests to the server occur over the internet. The nginx include function is basically a PHP include() on steroids.</p>

<figure class='code'><figcaption><span>/etc/nginx/sites-enabled link.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo ln -s /home/myusername/allmyedgeapps/myrails4app/config/nginx.conf myrails4app.com
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/home/myusername/allmyedgeapps/myrails4app nginx.conf.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>upstream myrails4app.com <span class="o">{</span>server unix:/tmp/myrails4app.sock <span class="nv">fail_timeout</span><span class="o">=</span>0;<span class="o">}</span>
</span><span class='line'>server <span class="o">{</span>
</span><span class='line'> server_name myrails4app.com www.myrails4app.com;
</span><span class='line'> root /home/myusername/allmyedgeapps/myrails4app/public;
</span><span class='line'> try_files <span class="nv">$uri</span>/index.html <span class="nv">$uri</span> @myrails4app.com;
</span><span class='line'> location @myrails4app.com <span class="o">{</span>
</span><span class='line'>  proxy_redirect off;
</span><span class='line'>  proxy_pass http://myrails4app.com;
</span><span class='line'> <span class="o">}</span>
</span><span class='line'> error_page 500 502 503 504 /500.html;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nginx will use port 80 by default so I wouldn&#8217;t even specify that in the nginx.conf files across all the rails apps sharing port 80 at the proxy outset. Now unleash and initialize puma. Keep in mind that all its incoming/outgoing request/response objects are proxied and passed to and from nginx. Restart Nginx if you have not done so already so that it picks up the configs and knows which upstream socket to point the incoming request associated with the specified servername. Make sure the hand-off occurs at the same place (the shared unix socket)&#8230; so double check your upstream block, it&#8217;s ok you&#8217;re supposed to put three forward slashes in what&#8217;s passed to puma and only one forward slash ahead of that same location in your nginx upstream block.</p>

<figure class='code'><figcaption><span>let puma run multi-thread from the root directory of your rails app - puma.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>puma -b unix:///tmp/myrails4app.sock
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ll go against the trend to advocate configuration over convention just this once in order to be realistic. Deployment is as important as anything else. Now most of our sequence here is arbitrary. After the sym link is made you have to restart nginx but the rest of it could occur before or after the unix socket is held down at puma initialization. Once proxy and puma&#8217;s socket are up go check your example.com, we used myrails4app.com in this discussion. You might forward domains or subdomians any domain or even a naked IP address would be all treated equally for any number of rails apps pointed to that IP address, or the IPv6 address too if possible. As Rails developers I know its a little unkosher to mention lower level IPv6, but come on, drawing from all this I hope you have a sense for the possiblities and found this post useful. Ryan Bates taught me how to do much of the puma stuff on <a href="http://railscasts.com/">railscasts.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[some jQuery effects]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/07/29/jquery-effects/"/>
    <updated>2012-07-29T02:27:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/07/29/jquery-effects</id>
    <content type="html"><![CDATA[<p>I need to reference some simple JavaScript over here for a site I&#8217;m building. We&#8217;re going to review the basic jQuery effects and end up explaining method syntax.</p>

<figure class='code'><figcaption><span>Hide Method - hide.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hide</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method hides all the elements in a jQuery object.</p>

<figure class='code'><figcaption><span>Timed Hide - hide.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hide</span><span class="p">(</span><span class="nx">time</span><span class="p">)</span>
</span><span class='line'><span class="nx">hide</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">easing</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing in the time constraint hides elements in a jQuery object over the duration with an optional easing style.</p>

<figure class='code'><figcaption><span>hide with function - hide.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hide</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="kd">function</span><span class="p">)</span>
</span><span class='line'><span class="nx">hide</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">easing</span><span class="p">,</span> <span class="kd">function</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hide the elements in a jQuery object over the specified duration with an optional easing style and a function called when the effect is complete.</p>

<figure class='code'><figcaption><span>Show Method - show.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method shows all the elements in a jQuery object.</p>

<figure class='code'><figcaption><span>Timed show - show.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">show</span><span class="p">(</span><span class="nx">time</span><span class="p">)</span>
</span><span class='line'><span class="nx">show</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">easing</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing in the time constraint shows elements in a jQuery object over the duration with an optional easing style.</p>

<figure class='code'><figcaption><span>show with function - show.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">show</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="kd">function</span><span class="p">)</span>
</span><span class='line'><span class="nx">show</span><span class="p">(</span><span class="nx">time</span><span class="p">,</span> <span class="nx">easing</span><span class="p">,</span> <span class="kd">function</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Show the elements in a jQuery object over the specified duration with an optional easing style and a function called when the effect is complete.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOPA: What's up with that?]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/01/19/sopa-whats-up-with-that/"/>
    <updated>2012-01-19T01:01:00-05:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/01/19/sopa-whats-up-with-that</id>
    <content type="html"><![CDATA[<p>I think Wikipedia said it best.</p>

<blockquote><p>SOPA and PIPA are symptoms of a larger issue. They are misguided solutions to a misunderstood problem. In the U.S. and abroad, legislators and big media are embracing censorship and sacrificing civil liberties in their attacks on free knowledge and an open Internet.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Learn_more'>SOPA initiative/Learn More</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search Engine in development]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/01/04/Search-Engine/"/>
    <updated>2012-01-04T04:54:00-05:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/01/04/Search-Engine</id>
    <content type="html"><![CDATA[<p>Cloudkickr&#8217;s search engine is in Development through <a href="http://rubyonrails.org" target="_blank">Ruby on Rails</a>. Both Twitter and Groupon were built with Ruby on Rails. Our search engine architecture is designed for routekickr (the new site and app coming soon). <br/><br/>A search engine has three parts: Crawl, Index and Query. Crawl is similar to how your web browser gets you content to view while you&#8217;re surfing the internet. So the Crawl part of the search engine goes out and collects HTML pages. This data is indexed for query optimization. End-user interacts with query parameters to find the relevent result, so there has to be a decent and reasonable data mapping relating query params to index.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Happy New Year!]]></title>
    <link href="http://cloudkickr.github.com/blog/2011/12/31/happy-new-year/"/>
    <updated>2011-12-31T19:23:00-05:00</updated>
    <id>http://cloudkickr.github.com/blog/2011/12/31/happy-new-year</id>
    <content type="html"><![CDATA[<p>&#8230;from <a href="http://bent-cardan.com" target="_blank">Bent Cardan</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Deployment: Gitlab]]></title>
    <link href="http://cloudkickr.github.com/blog/2011/12/30/ruby-on-rails-deployment-gitlab/"/>
    <updated>2011-12-30T21:50:00-05:00</updated>
    <id>http://cloudkickr.github.com/blog/2011/12/30/ruby-on-rails-deployment-gitlab</id>
    <content type="html"><![CDATA[<p>Cloudkickr is pleased to tell about its recent successful GitLab deployment. <a target="_blank" href="http://gitlabhq.com/">GitlabHQ</a> is for anyone managing project source code or interested in greater version-control and visibility with Git. Based on <a target="_blank" href="http://rubyonrails.org/">Ruby on Rails</a>, GitLab is a free git repository management app. It&#8217;s your own lite app for projects/repositories hosting on your server. Moreover, it&#8217;s fast, secure and a stable solution built straight off the <a target="_blank" href="http://rubyonrails.org/">Ruby on Rails</a> framework.</p>

<p>See a live demo of cloudkickr&#8217;s deployment at <a href="http://fresh.gs" target="_blank">fresh.gs</a>.</p>
]]></content>
  </entry>
  
</feed>
