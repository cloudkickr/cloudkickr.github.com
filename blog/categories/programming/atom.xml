<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | cloudkickr]]></title>
  <link href="http://cloudkickr.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://cloudkickr.github.com/"/>
  <updated>2012-11-08T14:16:00-05:00</updated>
  <id>http://cloudkickr.github.com/</id>
  <author>
    <name><![CDATA[Bent Cardan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS plus MongoDB]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/24/angularjs-mongodb/"/>
    <updated>2012-10-24T03:20:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/24/angularjs-mongodb</id>
    <content type="html"><![CDATA[<p>Think outside the box.</p>

<p>We're past relational data. We live in the single page web app era with a preference for <a href="http://nodejs.org/">Node.js</a>. <a href="http://www.mongodb.org/">MongoDB</a> for things of great import, so use the safe command:</p>

<p><code>collection.insert(doc2, {safe:true}, function(err, result) {});</code></p>

<p><a href="http://redis.io/">Redis</a> instances are cool speedy transaction when data persistence over a long duration is lower priority, i.e., session storage.</p>

<p>No matter what though it all flows back to HTML; even stylesheets cascade down to an element.</p>

<p>With that in mind, let's explore whether <a href="http://angularjs.org/">AngularJS</a> can help us craft real-time <a href="http://en.wikipedia.org/wiki/UI_data_binding">data bindings</a> that update the view immediately whenever the model changes.</p>

<p>JavaScript is definitely powerful enough to create DOM updates on changes in our data model. Of course the language is <a href="http://javascript.crockford.com/javascript.html">often unruly</a>.</p>

<p><a href="http://www.youtube.com/user/angularjs">Angular</a> offers a unique solution that may simplify things. Compare to <a href="http://backbonejs.org/">Backbone</a>. In Backbone, data changes (plus corresponding events fired from the data-model) bubble up to the view. So we like to start by declaring a model. Then extend it to watch for changes on the model via getters and setters--<a href="http://addyosmani.github.com/backbone-fundamentals/#mvc-mvp">The Observer Pattern</a>.</p>

<p>In completely different fashion, <a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a> in AngularJS allows us to <a href="http://en.wikipedia.org/wiki/Declarative_programming">declaratively</a> describe how our application is wired. The approach in Angular is such that any JavaScript object can be a model.</p>

<p>Sounds good, right? Now let's see if we can wire some AngularJS <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> to MongoDB... Check back soon for the snippet on how to do that, I'm working it out right now and I'll update this post soon with examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recommended Reading]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/19/recommended-reading/"/>
    <updated>2012-10-19T23:48:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/19/recommended-reading</id>
    <content type="html"><![CDATA[<p>Well, these are a few of my favorites right now.</p>

<p><img src="http://cloudkickr.github.com//s3.amazonaws.com/kickr/assets/images/good-books.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Thoughts About JavaScript]]></title>
    <link href="http://cloudkickr.github.com/blog/2012/10/03/whats-wrong-with-js/"/>
    <updated>2012-10-03T10:01:00-04:00</updated>
    <id>http://cloudkickr.github.com/blog/2012/10/03/whats-wrong-with-js</id>
    <content type="html"><![CDATA[<p>If we want to use the internet, well, then we need JavaScript.</p>

<p>The language is responsible for full stack web apps that perform as well as or even many times faster than what we would expect from <a href="http://rubyonrails.org/">Ruby on Rails</a>, backed by databases, request routers and their corollary, sometimes implemented in a controller: the response object.</p>

<p>Node is wild. We write Node Apps in JavaScript but it's like nothing I've ever done before. Callback functions guide the event-loop asynchronously.</p>

<p>Control the event loop by nesting functions in the fashion of JavaScript closures. It's out of hand when the inner function has a longer lifetime than its outer function. The server below stores keys and values in <a href="http://redis.io/">Redis</a> for session management during user authentication. Redis is useful for keeping track of state, non-blocking and super fast.</p>

<p>{% codeblock excerpt from redis module - user.js %}</p>

<p>var redis = require('redis')
   , bcrypt = require('bcrypt')
   , db = redis.createClient();</p>

<p>function User(obj) {
 for (var key in obj) {
   this[key] = obj[key];
 }
}</p>

<p>User.prototype.save = function(fn){
 if (this.id) {
   this.update(fn);
 } else {
   var self = this;
   db.incr('user:ids', function(err, id){</p>

<pre><code> if (err) return fn(err);
 self.id = id.toString();
 self.hashPassword(function(err){
    if (err) return fn(err);
    self.update(fn);
 });
}); 
</code></pre>

<p> }
};</p>

<p>// all redis-backed auth logic via module.</p>

<p>{% endcodeblock %}</p>

<p>File uploading and content management behind the auth layer are supported by MongoDB. I'm a fan of regular Mongo with the npm BSON install, but for this project I went for <a href="http://mongoosejs.com/">Mongoose</a>.</p>

<p>By separating logic out into modules we keep our code decoupled the way we like. We declare these dependencies in JavaScript through variable hoisting, so that our runtime stays predictable and most efficient, reducing the chances of unintended memory leak.</p>

<p>{% codeblock express 3 - app.js %}</p>

<p>/<em>*
 * Module dependencies.
 * Variable hoisting, replacing var with a comma.
 </em>/
var express = require('express')
  , routes = require('./routes')
  , user = require('./lib/middleware/user')
  , login = require('./routes/login')
  , register = require('./routes/register')
  , photos = require('./routes/photos')
  , about = require('./routes/about')
  , contact = require('./routes/contact')
  , blog = require('./routes/blog')
  , helpers = require('./lib/helpers')
  , http = require('http')
  , path = require('path')
//  , stylus = require('stylus')
//  , nib = require('nib')
//  , sass = require('node-sass')
  , less = require('less')
  , fs = require('fs')
  , md = require('github-flavored-markdown').parse
  , mongoose = require('mongoose')
  , db = mongoose.createConnection('localhost', 'test');</p>

<p>/<em>*
 * Connect to Databases.
 </em>/</p>

<p>// now time to connect to MongoDB.</p>

<p>db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {</p>

<p>  var aboutSchema = new Schema({</p>

<pre><code>contentsection:  String,
author: String,
body:   String,
date: { type: Date, default: Date.now },
hidden: Boolean,
</code></pre>

<p>  });</p>

<p>  var schema = new Schema({</p>

<pre><code>name:    String,
binary:  Buffer,
living:  Boolean,
updated: { type: Date, default: Date.now }
age:     { type: Number, min: 18, max: 65 }
mixed:   Schema.Types.Mixed,
_someId: Schema.Types.ObjectId,
array:      [],
ofString:   [String],
ofNumber:   [Number],
ofDates:    [Date],
ofBuffer:   [Buffer],
ofBoolean:  [Boolean],
ofMixed:    [Schema.Types.Mixed],
ofObjectId: [Schema.Types.ObjectId],
  nested: {
  stuff: { type: String, lowercase: true, trim: true }
}
</code></pre>

<p>  })</p>

<p>});</p>

<p>// ready the express web server</p>

<p>var app = express();</p>

<p>//function compile(str, path) {
//  return stylus(str)
//    .set('filename', path)
//    .set('compress', true)
//    .use(nib());
//}</p>

<p>/<em>*
 * Setup Markdown Template Engine
 </em>/</p>

<p>app.engine('md', function(path, options, fn){
  fs.readFile(path, 'utf8', function(err, str){</p>

<pre><code>if (err) return fn(err);
try {
  var html = md(str);
  html = html.replace(/\{([^}]+)\}/g, function(_, name){
    return options[name] || '';
  });
  fn(null, html);
} catch (err) {
</code></pre>

<p>  fn(err); }
}); });</p>

<p>// set the environment to development, Node's environment variable.</p>

<p>var env = process.env.NODE_ENV || 'development';</p>

<p>/<em>*
 * Express Middleware.
 </em>/</p>

<p>app.configure(function(){
  app.set('port', process.env.PORT || 3000);
  app.set('views', <strong>dirname + '/views');
  app.set('view engine', 'jade');
  app.set('view options', {layout: true});
  app.use(express.favicon(</strong>dirname + '/public/favicon.ico'));
  app.set('photos', <strong>dirname + '/public/photos');
  app.use(express.favicon());
  app.use(express.logger('dev'));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.cookieParser('blurfoobarnar'));
  app.use(express.cookieSession());
  app.use(user);
//  app.use(stylus.middleware({
//    src: </strong>dirname
//    , compile: compile
//  }));
  app.use(express.static(path.join(__dirname, 'public')));
  app.use(app.router);
  if ('development' == env) {</p>

<pre><code>app.use(express.errorHandler());
app.set('photos', __dirname + '/public/photos');
</code></pre>

<p>  }
});</p>

<p>{% endcodeblock %}</p>

<p>Node was designed around fundamental concepts of network engineering and data transport. These fundamentals of data flow are better known as <code>the request</code> made by a browser and <code>the response</code> from the server. Node forces the developer to deal with each side of the coin.</p>

<p>{% codeblock express 3 continued - app.js %}</p>

<p>/<em>*
 * Routing.
 </em>/</p>

<p>app.get('/', routes.index);
app.get('/users', user.list);
app.get('/photos', photos.list);
app.get('/login', login.form);
app.post('/login', login.submit);
app.get('/logout', login.logout);
app.get('/register', register.form);
app.post('/register', register.submit);
app.get('/upload', photos.form);
app.post('/upload', photos.submit(app.get('photos')));
app.get('/about', about.list);
app.get('/contact', contact.list);
app.get('/songs', songs.list);
app.get('/studios', studios.list);
app.get('/entertainment', entertainment.list);
app.get('/create', create.list);
app.get('/blog', blog.list);</p>

<p>/<em>*
 * Initializing the server now.
 </em>/</p>

<p>http.createServer(app).listen(app.get('port'), function(){</p>

<p>  console.log("Express server listening on port " + app.get('port'));
});</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
